==16852== Memcheck, a memory error detector
==16852== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16852== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==16852== Command: ./so_long.out
==16852== Parent PID: 16851
==16852== 
==16852== Use of uninitialised value of size 8
==16852==    at 0x402573: main (main.c:28)
==16852==  Uninitialised value was created by a stack allocation
==16852==    at 0x402560: main (main.c:25)
==16852== 
==16852== Invalid write of size 4
==16852==    at 0x402573: main (main.c:28)
==16852==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
==16852== 
==16852== 
==16852== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==16852==  Access not within mapped region at address 0x10
==16852==    at 0x402573: main (main.c:28)
==16852==  If you believe this happened as a result of a stack
==16852==  overflow in your program's main thread (unlikely but
==16852==  possible), you can try to increase the size of the
==16852==  main thread stack using the --main-stacksize= flag.
==16852==  The main thread stack size used in this run was 8388608.
==16852== 
==16852== HEAP SUMMARY:
==16852==     in use at exit: 0 bytes in 0 blocks
==16852==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==16852== 
==16852== All heap blocks were freed -- no leaks are possible
==16852== 
==16852== For lists of detected and suppressed errors, rerun with: -s
==16852== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
